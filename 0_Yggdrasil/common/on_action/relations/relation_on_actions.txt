#On actions relating to relationships between characters

####################
# Relationship upgrade
####################
#Events to upgrade relationships (potential -> full)
relation_upgrade_quarterly_pulse = {
	trigger = {
		is_available_adult = yes
		any_relation = { #You have a relationship to change
			type = potential_rival
			type = rival
			type = potential_friend
			type = friend
			type = potential_lover
			type = lover
		}
	}

	random_events = {
		chance_to_happen = 30
		500 = 0
		100 = relation_upgrade.0001
		100 = relation_upgrade.1001
		100 = relation_upgrade.2001
		100 = relation_upgrade.2101
	}
}


##################
# Lover relation on_action
##################

#Fired from the a quarterly pulse once a year
lover_quarterly_pulse = {
	trigger = {
		scope:quarter = 1
	}
	on_actions = {
		lover_status_changes
	}
}

#Lover ongoing events - can fire from the yearly playable pulse
lover_ongoing = {
	trigger = {
		num_of_relation_lover > 0
		is_in_the_same_court_as = root
	}
	weight_multiplier = {
		base = 1
		compare_modifier = {
			value = num_of_relation_lover
		}
	}
	random_events = { #Highly situational events to try to trigger first
		chance_to_happen = 25
		300 = 0
		500 = lover.0003 #Too many lovers - break up with one?
		100 = lover.1001 #A Lover shares someone's secret with you
		100 = lover.1002 #A Lover aids a diplomatic scheme
		100 = lover.3206 #You're forced to wage war against your lover
	
	}
	fallback = lover_ongoing_fallback
}

lover_ongoing_fallback = {
	random_events = {
		chance_to_happen = 25
		300 = 0
		100 = lover.1003 #Lover helps you lose stress
		100 = lover.1004 #Travel somewhere with your lover
		100 = lover.1006 #Liege lover granting council position
		100 = lover.1007 #Liege lover granting better contract
		100 = lover.1008 #Liege lover granting county modifier
		100 = lover.2001 #Having a secret lover causes stress
		100 = lover.2002 #High stress damages your relationship to your Lover
		100 = lover.2004 #Question exclusive partner about spouse
		50 = lover.0300 #Ask lover to be exclusive
		20 = lover.3002 #Start Love Letter chain
		100 = lover.3201 #Leave lover_object_of_importance for lover to find
		100 = lover.3203 #Go to your spouse or your lover
		100 = lover.7001 #Chance that a good friend becomes a potential lover
		100 = lover.7003 #Chance that a rival becomes a potential lover
		50 = lover.7005 #Chance that a close family member becomes a potential lover
	}
}


#Long-distance Lover ongoing events - can fire from the yearly playable pulse
#You should get fewer event if your lover is in another court
lover_ongoing_distance = {
	trigger = {
		num_of_relation_lover > 0
		NOT = { is_in_the_same_court_as = root }
	}
	weight_multiplier = {
		base = 1
		compare_modifier = {
			value = num_of_relation_lover
		}
	}
	random_events = { #Highly situational events to try to trigger first
		chance_to_happen = 25
		300 = 0
		500 = lover.0003 #Too many lovers - break up with one?
		50 = lover.1001 #A Lover shares someone's secret with you
		50 = lover.1002 #A Lover aids a diplomatic scheme
		100 = lover.3206 #You're forced to wage war against your lover
	}
	fallback = lover_ongoing_distance_fallback
}

lover_ongoing_distance_fallback = {
	random_events = {
		chance_to_happen = 25
		300 = 0
		50 = lover.1003 #Lover helps you lose stress
		50 = lover.1004 #Travel somewhere with your lover
		100 = lover.1006 #Liege lover granting council position
		100 = lover.1007 #Liege lover granting better contract
		100 = lover.1008 #Liege lover granting county modifier
		100 = lover.2001 #Having a secret lover causes stress
		100 = lover.2002 #High stress damages your relationship to your Lover
		100 = lover.2004 #Question exclusive partner about spouse
		20 = lover.3002 #Start Love Letter chain
		50 = lover.0300 #Ask lover to be exclusive
		50 = lover.3201 #Leave lover_object_of_importance for lover to find
		100 = lover.3204 #Your lover is far far away
		100 = lover.3207 #Write letter to beloved!
		100 = lover.3211 #Send lover a painting
		100 = lover.3215 #Send a troubadour to lover's court
		100 = lover.3219 #Send a personal object to lover
		100 = lover.7001 #Chance that a good friend becomes a potential lover
		100 = lover.7003 #Chance that a rival becomes a potential lover
		50 = lover.7005 #Chance that a close family member becomes a potential lover
	}
}

#Lover status changes
lover_status_changes = {
	trigger = {
		num_of_relation_lover > 0
		is_available_adult = yes
	}
	random_events = {
		chance_to_happen = 50
		100 = 0
		100 = lover.0001 #Your lover has  a low opinion of you, breaks up
	}
}


on_set_relation_lover = {
	effect = {
		give_incest_secret_or_nothing_with_target_effect = { CHARACTER = scope:target }
		scope:target = { give_incest_secret_or_nothing_with_target_effect = { CHARACTER = root } }
		give_homosexual_secret_or_nothing_with_target_effect = { CHARACTER = scope:target }
		scope:target = { give_homosexual_secret_or_nothing_with_target_effect = { CHARACTER = root } }
		if = {
			limit = {
				has_relation_potential_lover = scope:target
			}
			remove_relation_potential_lover = scope:target
		}
	}
	#events = {
	#	lover.0010
	#}
}

on_remove_relation_lover = {
	effect = {
		lose_lover_effect = {
			LOVER = scope:target
		}
	}
}

######################
# Friendship on actions
######################
friendship_quarterly_pulse = {
	trigger = {
		scope:quarter = 2
	}
	on_actions = {
		friendship_status_changes
	}
}


friendship_status_changes = {
	trigger = {
		OR = {
			num_of_relation_friend > 0
		}
		is_available_adult = yes
	}

	random_events = { # If we add updates that are time sensitive, we need to rework this so it's no longer random when/what fires
		chance_to_happen = 50
		100 = 0
		100 = friendship.0001 #Lose a friend you no longer like
		100 = friendship.0010 #Lose a best friend you no longer like
		100 = friendship.0014 #Become Rivals instead of Friends
		100 = friendship.0018 #Lose a Friend due to having so many of them
	}
}


friendship_ongoing = {
	trigger = {
		num_of_relation_friend > 0
	}
	weight_multiplier = {
		base = 1
		compare_modifier = {
			value = num_of_relation_friend
		}
	}

	random_events = {
		chance_to_happen = 25
		300 = 0
		10 = friendship.0003 #Friend might become Lover
		100 = friendship.1001 #Send Friend a gift
		200 = friendship.1006 # Receive wartime support from Friend
		100 = friendship.1008 #Send a good courtier to your Friend
		100 = friendship.2001 #Confess a secret to your Friend
		30 = friendship.2004 #Confess a Major secret to your Friend
		100 = friendship.2007 #Try to improve a character's impression of your Friend
		100 = friendship.3001 #Get along with your spouse's friend
		100 = friendship.3003 #You hate your spouse's friend
		100 = friendship.3006 #A Friend gets you a favor hook on one of your Councillors
		300 = friendship.3007 # Hanging out with your Friend reduces Stress
	}
}


# Gaining Friend relations
on_set_relation_friend = {
	effect = {
		if = {
			limit = {
				has_relation_potential_friend = scope:target
			}
			remove_relation_potential_friend = scope:target
		}
		if = {
			limit = { has_perk = confidants_perk }
			add_character_modifier = {
				modifier = confidants_perk_modifier
			}
		}
		scope:target = {
			if = {
				limit = { has_perk = confidants_perk }
				add_character_modifier = {
					modifier = confidants_perk_modifier
				}
			}
		}
	}
}

# Losing friend relations
on_remove_relation_friend = {
	effect = {
		remove_character_modifier = confidants_perk_modifier
		scope:target = {
			if = {
				limit = { has_perk = confidants_perk }
				remove_character_modifier = confidants_perk_modifier
			}
		}
	}
}


####################
# Rival on actions
####################
rival_quarterly_pulse = {
	trigger = {
		scope:quarter = 3
	}
	on_actions = {
		rival_relation_changes
	}
}


rival_relation_changes = {
	trigger = {
		OR = {
			num_of_relation_rival > 0
			num_of_relation_potential_rival > 0
		}
		is_available_adult = yes
	}

	random_events = {
		chance_to_happen = 50
		100 = 0
		100 = rivalry.0001
		100 = rivalry.0003 #Nemesis becomes too pathetic
	}
}


rivalry_ongoing = {
	trigger = {
		num_of_relation_rival > 0
	}
	weight_multiplier = {
		base = 1
		compare_modifier = {
			value = num_of_relation_rival
		}
	}
	
	random_events = {
		chance_to_happen = 25
		300 = 0
		100 = rivalry.2001 #Hinder the progress of rival's Befriend scheme
	}
	fallback = rivalry_ongoing_fallback
}

rivalry_ongoing_fallback = {
	random_events = {
		chance_to_happen = 25
		300 = 0
		100 = rivalry.1001 #Rival adds stress
		100 = rivalry.1010 #Spiteful Acts ( my rival's aggravating behavior has gone on long enough)
		100 = rivalry.1030 #Meddling in Marriage
		100 = rivalry.3001 #Rival insults you
		100 = rivalry.3002 #You like the Rival of a Friend less
		100 = rivalry.3004 #Decrease opinion of rival because of opposing personality trait
	}
}

on_set_relation_rival = {
	effect = {
		if = {
			limit = {
				has_relation_potential_rival = scope:target
			}
			remove_relation_potential_rival = scope:target
		}
	}
}

on_remove_relation_rival = {
#	events = {
#		rivalry.9999
#	}
}


####################
# Mentor/Student on actions
####################
mentor_student_quarterly_pulse = {
	trigger = {
		scope:quarter = 4
	}
	on_actions = {
		mentor_student_relation_changes
	}
}




mentor_student_relation_changes = {
	trigger = {
		num_of_relation_intrigue_mentor > 0
		is_available_adult = yes
	}

	random_events = {
		chance_to_happen = 50
		500 = 0
		100 = mentor_student.0001
		100 = mentor_student.0002
		100 = mentor_student.0003
	}
}



##################
# Guardian/ward
##################

#Fired for the ward when they remove the relation with the guardian
on_remove_relation_guardian = {
	effect = {
		#Remove guardian opinions when guardian is removed from ward or the ward is about to die
		if = { # ward must have a liege
			limit = { exists = liege }
			liege = { save_scope_as = ward_liege }
			guardian_remove_opinion_effect = {
				WARD = root
				GUARDIAN = scope:target
				WARD_LIEGE = scope:ward_liege
			}
		}
	}
}
#Fired for the ward when they die while having a guardian
on_death_relation_guardian = {
	effect = {
		#Remove guardian opinions when guardian is removed from ward or the ward is about to die
		if = { #Commented out because this shouldn't be needed but if we get errors something weird might be going on
			limit = { exists = liege }
			liege = { save_scope_as = ward_liege }
			guardian_remove_opinion_effect = {
				WARD = root
				GUARDIAN = scope:target
				WARD_LIEGE = scope:ward_liege
			}
		}
	}
}

#Fired for the guardian when they remove the relation with the ward
on_remove_relation_ward = {
	effect = {
		#Remove guardian opinions when ward is removed from guardian or when the guardian is about to die
		if = { #Commented out because this shouldn't be needed but if we get errors something weird might be going on
			limit = { exists = liege }
			liege = { save_scope_as = ward_liege }
			guardian_remove_opinion_effect = {
				WARD = scope:target
				GUARDIAN = root
				WARD_LIEGE = scope:ward_liege
			}
		}
	}
}

#Fired for the guardian when they die while having a ward
on_death_relation_ward = {
	effect = {
		#Remove guardian opinions when ward is removed from guardian or when the guardian is about to die
		if = { #Commented out because this shouldn't be needed but if we get errors something weird might be going on
			limit = { exists = liege }
			liege = { save_scope_as = ward_liege }
			guardian_remove_opinion_effect = {
				WARD = scope:target
				GUARDIAN = root
				WARD_LIEGE = scope:ward_liege
			}
		}
	}
}
