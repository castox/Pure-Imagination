
######################################################
############### ANIMATION TEMPLATES ##################
######################################################

# Curves
template Animation_Curve_Default
{
    bezier = { 0.25 0.1 0.25 1 }
}

template Animation_Transition_Start
{
    bezier = { 0.5 0 0 0 }
}

template Animation_Transition_End
{
    bezier = { 1 1 0.5 1 }
}

# Fade animations

template Animation_FadeIn_Standard
{
    using = Animation_Curve_Default
    duration = 0.25

    alpha = 1
}

template Animation_FadeOut_Standard
{
    using = Animation_Curve_Default
    duration = 0.25

    alpha = 0
}

template Animation_FadeIn_Quick
{
    using = Animation_Curve_Default
    duration = 0.15

    alpha = 1
}

template Animation_FadeOut_Quick
{
    using = Animation_Curve_Default
    duration = 0.15

    alpha = 0
}

# Package of standard show/hide states
template Animation_ShowHide_Standard
{
    state = {
        name = _show
        using = Animation_FadeIn_Standard
    }

    state = {
        name = _hide
        using = Animation_FadeOut_Standard
    }
}

template Animation_ShowHide_Quick
{
    state = {
        name = _show
        using = Animation_FadeIn_Quick
    }

    state = {
        name = _hide
        using = Animation_FadeOut_Quick
    }
}

template Animation_Tab_Switch
{
    state = {
        name = _show
        using = Animation_FadeIn_Quick
    }

    state = {
        name = _hide
        alpha = 0
    }
}

### Window content refresh animation
template Animation_Refresh_FadeOut
{
    alpha = 0.5
    next = "fadein"
    using = Animation_Curve_Default
}

template Animation_Refresh_FadeIn
{
    name = "fadein"
    alpha = 1
    duration = 0.4
    bezier = { 0.5 0 1 0.5 }
}

template Animation_Glow_Pulse
{
    state = {
        trigger_on_create = yes

        name = max_glow
        next = min_glow
        duration = 1
        using = Animation_Curve_Default

        glow_alpha = 0.8
    }

    state = {
        name = min_glow
        next = max_glow
        duration = 1.6
        using = Animation_Curve_Default

        glow_alpha = 0.4
    }
}

### STATUS

template Status_Bad
{
    texture = "gfx/interface/component_masks/mask_brushed.dds"
    color = { 0.5 0.2 0.15 0.7 }
    spriteType = Corneredtiled
    spriteborder = { 20 10 }

    margin = { 5 0 }
    margin_bottom = 3
    margin_top = -3
}

template Status_Mixed
{
    texture = "gfx/interface/component_masks/mask_brushed.dds"
    color = { 0.5 0.5 0.1 0.7 }
    spriteType = Corneredtiled
    spriteborder = { 20 10 }

    margin = { 5 0 }
    margin_bottom = 3
    margin_top = -3
}

template Status_Good
{
    texture = "gfx/interface/component_masks/mask_brushed.dds"
    color = { 0.24 0.32 0.18 0.7 }
    spriteType = Corneredtiled
    spriteborder = { 20 10 }

    margin = { 5 0 }
    margin_bottom = 3
    margin_top = -3
}


template Status_Suggestion
{
    texture = "gfx/interface/component_masks/mask_brushed.dds"
    # color = { 0.14 0.14 0.25 0.5 }
    color = { 0.2 0.2 0.31 0.5 }

    spriteType = Corneredtiled
    spriteborder = { 20 10 }
}

template Status_Suggestion_Bad
{
    texture = "gfx/interface/component_masks/mask_brushed.dds"
    color = { 0.18 0.13 0.13 1 }
    spriteType = Corneredtiled
    spriteborder = { 20 10 }


    margin = { 5 0 }
    margin_bottom = 3
    margin_top = -3
}

template Status_Suggestion_Good
{
    texture = "gfx/interface/component_masks/mask_brushed.dds"
    # color = { 0.12 0.18 0.12 1 }
    color = { 0.17 0.24 0.16 1 }

    spriteType = Corneredtiled
    spriteborder = { 20 10 }

    margin = { 5 0 }
    margin_bottom = 3
    margin_top = -3
}

template Status_Highlight
{
    texture = "gfx/interface/component_masks/mask_brushed.dds"
    color = { 0.5 0.4 0.25 0.5 }
    spriteType = Corneredtiled
    spriteborder = { 20 10 }

    margin = { 5 0 }
    margin_bottom = 3
    margin_top = -3
}


### MAP ICONS

template Animation_MapIcon_Fade
{
    state = {
        name = _show
        duration = 0.15
        alpha = 1

        block "icon_size" {}
    }

    state = {
        name = _hide
        size = { 0 0 }
        duration = 0.15
        alpha = 0
    }

}


### GLOW TEMPLATES
template Glow_Standard
{
    glow_generation_rules= {
        glow_max_radius = 12
        glow_alpha_mask = 0
        glow_blur_passes = 10
        glow_texture_downscale = 2.5f
        glow_ignore_inside_pixels = yes
    }
}

### ANIMATIONS

types Animations
{
    # "Look at me!" For textbuttons
    type animation_attention_text = icon {
        name = "emphasis_effect"
        parentanchor = center
        size = { 100% 100% }

        spriteType = Corneredtiled
        spriteborder = { 10 10 }

        texture = "gfx/interface/component_effects/attention_text.dds"
        using = Color_Orange

        state = {
            trigger_on_create = yes
            name = a
            next = b

            using = Animation_Curve_Default
            duration = 0.8
            alpha = 1
        }

        state = {
            name = b
            next = a

            using = Animation_Curve_Default
            duration = 1.5
            alpha = 0.5
        }
    }

    ### current special event option look
    type animation_glow_event = icon {
        size = { 95% 100% }
        parentanchor = center
        frame = 2
        texture = "gfx/interface/buttons/button_mouseover_event.dds"
        spriteType = Corneredstretched
        spriteborder = { 20 20 }
        framesize = { 238 63 }

        modify_texture = {
            name = "overlay"
            texture = "gfx/interface/buttons/button_standard_overlay.dds"
            spriteType = Corneredstretched
            spriteborder = { 3 3 }
            blend_mode = overlay
        }

        # state = {
        #     trigger_on_create = yes
        #     name = a
        #     next = b

        #     using = Animation_Curve_Default
        #     duration = 1
        #     alpha = 1
        # }

        # state = {
        #     name = b
        #     next = a

        #     using = Animation_Curve_Default
        #     duration = 1.4
        #     alpha = 0.5
        # }
    }

    # Use this to signal that an action means serious business, ie. on a button that starts a war
    type animation_aggressive = widget {
        parentanchor = center
        size = { 100% 100% }

        state = {
            name = _show
            trigger_on_create = yes
            on_start = "[PdxGuiWidget.AccessChild('fire').TriggerAnimation('show')]"
            on_start = "[PdxGuiWidget.AccessChild('fire_2').TriggerAnimation('show_2')]"
        }

        icon = {
            name = "fire"
            size = { 100% 100% }

            texture = "gfx/interface/component_masks/mask_fade_vertical_up.dds"
            spriteType = Corneredtiled
            using = Color_Bright_Yellow

            modify_texture = {
                name = "mask"
                texture = "gfx/interface/component_masks/mask_rough_texture_02.dds"
                blend_mode = alphamultiply
            }

            modify_texture = {
                name = "mask_2"
                texture = "gfx/interface/component_masks/mask_rough_texture.dds"
                blend_mode = alphamultiply
            }

            modify_texture = {
                name = "mask_3"
                texture = "gfx/interface/component_masks/mask_fade_horizontal_middle_thick.dds"
                blend_mode = alphamultiply
            }

            state = {
                name = show
                next = shimmer
                duration = 0
                alpha = 1
                modify_texture = {
                    name = "mask"
                    translate_uv = { 0 -0.8 }
                }

                modify_texture = {
                    name = "mask_2"
                    translate_uv = { 0 0 }
                }
            }

            state = {
                name = shimmer
                next = a
                duration = 1
                alpha = 1

                modify_texture = {
                    name = "mask"
                    translate_uv = { 0 0 }
                }

                modify_texture = {
                    name = "mask_2"
                    translate_uv = { 0 0.8 }
                }
            }

            state = {
                name = a
                next = b
                duration = 0.25
                using = Animation_Curve_Default
                alpha = 0

                modify_texture = {
                    name = "mask"
                    translate_uv = { 0 0 }
                }

                modify_texture = {
                    name = "mask_2"
                    translate_uv = { 0 0.8 }
                }
            }

            state = {
                name = b
                next = c
                duration = 1
                using = Animation_Curve_Default
                alpha = 0

                modify_texture = {
                    name = "mask"
                    translate_uv = { 0 -1 }
                }

                modify_texture = {
                    name = "mask_2"
                    translate_uv = { 0 -0.2 }
                }
            }

            state = {
                name = c
                next = shimmer
                duration = 0.5
                using = Animation_Curve_Default
                alpha = 1

                modify_texture = {
                    name = "mask"
                    translate_uv = { 0 -0.8 }
                }

                modify_texture = {
                    name = "mask_2"
                    translate_uv = { 0 0 }
                }
            }
        }

        icon = {
            name = "fire_2"
            size = { 100% 100% }

            texture = "gfx/interface/component_masks/mask_fade_vertical_up.dds"
            using = Color_Bright_Yellow
            spriteType = Corneredtiled

            modify_texture = {
                name = "mask"
                texture = "gfx/interface/component_masks/mask_rough_texture_02.dds"
                blend_mode = alphamultiply
            }

            modify_texture = {
                name = "mask_2"
                texture = "gfx/interface/component_masks/mask_rough_texture.dds"
                blend_mode = alphamultiply
            }

            modify_texture = {
                name = "mask_3"
                texture = "gfx/interface/component_masks/mask_fade_horizontal_middle_thick.dds"
                blend_mode = alphamultiply
            }

            state = {
                name = show_2
                next = d
                duration = 0
                alpha = 0
                modify_texture = {
                    name = "mask"
                    translate_uv = { 0 -1 }
                }

                modify_texture = {
                    name = "mask_2"
                    translate_uv = { 0 -0.2 }
                }
            }

            ###### DELAY
            state = {
                name = d
                next = f

                duration = 1.15
                alpha = 0

                modify_texture = {
                    name = "mask"
                    translate_uv = { 0 -1 }
                }

                modify_texture = {
                    name = "mask_2"
                    translate_uv = { 0 -0.2 }
                }
            }

            state = {
                name = f
                next = show
                duration = 0.25
                alpha = 1
                modify_texture = {
                    name = "mask"
                    translate_uv = { 0 -0.8 }
                }

                modify_texture = {
                    name = "mask_2"
                    translate_uv = { 0 0 }
                }
            }

            state = {
                name = show
                next = shimmer
                duration = 0
                alpha = 1
                modify_texture = {
                    name = "mask"
                    translate_uv = { 0 -0.8 }
                }

                modify_texture = {
                    name = "mask_2"
                    translate_uv = { 0 0 }
                }
            }

            state = {
                name = shimmer
                next = a
                duration = 1
                alpha = 1

                modify_texture = {
                    name = "mask"
                    translate_uv = { 0 0 }
                }

                modify_texture = {
                    name = "mask_2"
                    translate_uv = { 0 0.8 }
                }
            }

            state = {
                name = a
                next = b
                duration = 0.25
                using = Animation_Curve_Default
                alpha = 0

                modify_texture = {
                    name = "mask"
                    translate_uv = { 0 0 }
                }

                modify_texture = {
                    name = "mask_2"
                    translate_uv = { 0 0.8 }
                }
            }

            state = {
                name = b
                next = c
                using = Animation_Curve_Default
                alpha = 0
                duration = 1

                modify_texture = {
                    name = "mask"
                    translate_uv = { 0 -1 }
                }

                modify_texture = {
                    name = "mask_2"
                    translate_uv = { 0 -0.2 }
                }
            }

            state = {
                name = c
                next = show
                duration = 0.5
                using = Animation_Curve_Default
                alpha = 1

                modify_texture = {
                    name = "mask"
                    translate_uv = { 0 -0.8 }
                }

                modify_texture = {
                    name = "mask_2"
                    translate_uv = { 0 0 }
                }
            }
        }
    }

    ## Lifestyle HUD animation
    type animation_sonar = icon {
        name = "effect_sonar"
        parentanchor = center
        size = { 100% 100% }

        texture = "gfx/interface/component_effects/effect_sonar_ring.dds"
        alwaystransparent = yes
        alpha = 0
        scale = 0

        state = {
            trigger_on_create = yes
            name = a
            next = c

            using = Animation_Curve_Default
            duration = 0.3
            alpha = 1
            scale = 0
        }

        state = {
            name = c
            next = b

            using = Animation_Curve_Default
            duration = 0.9
            alpha = 0
            scale = 3
        }

        state = {
            name = b

            using = Animation_Curve_Default
            duration = 1
            alpha = 0
            scale = 0
        }
    }
    type animation_talk = icon {
        name = "effect_talk"

        alwaystransparent = yes


        state = {
            trigger_when = "[GetScriptedGui('start_talk').IsShown( GuiScope.SetRoot( Scope.GetCharacter.MakeScope ).End )]"
            name = a
            next = b
            on_start = "[GetScriptedGui('talk_begin').Execute(GuiScope.SetRoot(Scope.GetCharacter.MakeScope).End)]"
            using = Animation_Curve_Default
            duration = 0.2

        }

        state = {
            name = b
            next = c
            on_start = "[GetScriptedGui('talk_begin').Execute(GuiScope.SetRoot(Scope.GetCharacter.MakeScope).End)]"
            using = Animation_Curve_Default
            duration = 0.1

        }

        state = {
            name = c
            next = d
            using = Animation_Curve_Default
            duration = 0.2
            on_start = "[GetScriptedGui('talk_begin').Execute(GuiScope.SetRoot(Scope.GetCharacter.MakeScope).End)]"
        }

        state = {
            name = d
            next = e
            on_start = "[GetScriptedGui('talk_begin').Execute(GuiScope.SetRoot(Scope.GetCharacter.MakeScope).End)]"
            using = Animation_Curve_Default
            duration = 0.1

        }

        state = {
            name = e
            next = f
            on_start = "[GetScriptedGui('talk_begin').Execute(GuiScope.SetRoot(Scope.GetCharacter.MakeScope).End)]"
            using = Animation_Curve_Default
            duration = 0.2

        }

        state = {
            name = f
            next = g
            using = Animation_Curve_Default
            duration = 0.1
            on_start = "[GetScriptedGui('talk_begin').Execute(GuiScope.SetRoot(Scope.GetCharacter.MakeScope).End)]"
        }

        state = {
            name = g
            next = h
            on_start = "[GetScriptedGui('talk_begin').Execute(GuiScope.SetRoot(Scope.GetCharacter.MakeScope).End)]"
            using = Animation_Curve_Default
            duration = 0.2

        }

        state = {
            name = h
            next = i
            using = Animation_Curve_Default
            duration = 0.1
            on_start = "[GetScriptedGui('talk_begin').Execute(GuiScope.SetRoot(Scope.GetCharacter.MakeScope).End)]"
        }
        state = {
            name = i
            next = j
            using = Animation_Curve_Default
            duration = 0.2
            on_start = "[GetScriptedGui('talk_begin').Execute(GuiScope.SetRoot(Scope.GetCharacter.MakeScope).End)]"
        }
        state = {
            name = j
            next = k
            using = Animation_Curve_Default
            duration = 0.1
            on_start = "[GetScriptedGui('talk_begin').Execute(GuiScope.SetRoot(Scope.GetCharacter.MakeScope).End)]"
        }
        state = {
            name = k
            next = a
            using = Animation_Curve_Default
            duration = 0.5
            on_start = "[GetScriptedGui('talk_begin').Execute(GuiScope.SetRoot(Scope.GetCharacter.MakeScope).End)]"
        }
        state = {
			name = stop_talking_now
			
			on_start = "[PdxGuiWidget.InterruptAnimation('a')]"
			on_start = "[PdxGuiWidget.InterruptAnimation('b')]"
            on_start = "[PdxGuiWidget.InterruptAnimation('c')]"
			on_start = "[PdxGuiWidget.InterruptAnimation('d')]"
            on_start = "[PdxGuiWidget.InterruptAnimation('e')]"
			on_start = "[PdxGuiWidget.InterruptAnimation('f')]"
            on_start = "[PdxGuiWidget.InterruptAnimation('g')]"
			on_start = "[PdxGuiWidget.InterruptAnimation('h')]"
            on_start = "[PdxGuiWidget.InterruptAnimation('i')]"
			on_start = "[PdxGuiWidget.InterruptAnimation('k')]"
			trigger_when = "[GetScriptedGui('talk_end').IsShown( GuiScope.SetRoot( Scope.GetCharacter.MakeScope ).End )]"
		}                        

    }
    type animation_progessbar_center_glow = widget {
        using = Animation_ShowHide_Standard

        widget = {
            size = { 100% 100% }

            widget = {
                size = { 100% 100% }
                scissor = yes

                button = {
                    parentanchor = right
                    size = { 100 100% }
                    framesize = { 192 112 }
                    texture = "gfx/interface/component_effects/sparks.dds"
                    alpha = 0.12
                    alwaystransparent = yes

                    gfxtype = animatedbuttongfx
                    loopinterval = 4

                    modify_texture = {
                        texture = "gfx/interface/component_masks/mask_fade_horizontal.dds"
                        blend_mode = alphamultiply
                    }
                }

                icon = {
                    parentanchor = right
                    size = { 80 100% }
                    texture = "gfx/interface/colors/white.dds"
                    shaderfile = "gfx/FX/repeat_texture.shader"
                    alpha = 0.4

                    #   block "glow_color"
                    #  {
                    using = Color_Bright_Yellow

                    #   }

                    modify_texture = {
                        texture = "gfx/interface/component_masks/mask_fade_horizontal.dds"
                        blend_mode = alphamultiply
                    }

                    modify_texture = {
                        name = "clouds"
                        texture = "gfx/interface/component_masks/mask_clouds.dds"
                        blend_mode = alphamultiply
                        spriteType = corneredtiled
                        texture_density = 2
                    }

                    state = {
                        name = a
                        next = b
                        trigger_on_create = yes

                        modify_texture = {
                            name = "clouds"
                            translate_uv = { -1 0 }
                        }
                    }

                    state = {
                        name = b
                        next = a
                        duration = 2

                        modify_texture = {
                            name = "clouds"
                            translate_uv = { 1 0 }
                        }
                    }
                }
            }

            icon = {
                parentanchor = right|vcenter
                position = { 20 0 }
                size = { 80 100% }
                texture = "gfx/interface/progressbars/progressbar_center_glow.dds"

                # block "glow_color"
                # {
                #     using = Color_Bright_Yellow

                # }

                state = {
                    name = a
                    next = b
                    trigger_on_create = yes
                    duration = 0.1
                    alpha = 1
                }

                state = {
                    name = b
                    next = a
                    duration = 0.2
                    alpha = 0.9
                }
            }
        }
    }
         
}